##导入宏定义
$!{define.vm} 

##设置表后缀（宏定义）
#setTableSuffix("Controller")

##保存文件（宏定义）
#save("/controller", "ControllerAdvanced.kt")

##包路径（宏定义）
#setPackageSuffix("controller")

##定义服务名
#set($serviceName = $!tool.append($!tool.firstLowerCase($!tableInfo.name), "Service"))

##定义实体对象名
#set($entityName = $!tool.firstLowerCase($!tableInfo.name))

import $!{tableInfo.savePackageName}.domain.dto.$!{tableInfo.name}DTO
import $!{tableInfo.savePackageName}.domain.dto.$!{tableInfo.name}PageDTO
import $!{tableInfo.savePackageName}.domain.vo.$!{tableInfo.name}VO
import $!{tableInfo.savePackageName}.mapper.$!{tableInfo.name}Mapper
import $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service
import com.micronaut.parent.controller.BaseController
import com.micronaut.parent.entities.PageableDTO
import com.micronaut.parent.entities.Rsp
import com.micronaut.parent.entities.RspPagination
import io.micronaut.core.annotation.Introspected
import io.micronaut.core.async.annotation.SingleResult
import io.micronaut.http.annotation.*
import io.micronaut.security.annotation.Secured
import io.micronaut.validation.Validated
import io.swagger.v3.oas.annotations.Operation
import io.swagger.v3.oas.annotations.Parameter
import io.swagger.v3.oas.annotations.tags.Tag
import reactor.core.publisher.Mono
import io.micronaut.core.annotation.Nullable
import io.micronaut.security.authentication.Authentication
import jakarta.validation.Valid
import jakarta.validation.constraints.NotEmpty
import com.micronaut.parent.rule.SecurityRules
import io.micronaut.scheduling.TaskExecutors
import io.micronaut.scheduling.annotation.ExecuteOn
import jakarta.validation.constraints.NotNull

@Controller("/v1/advanced/$tableInfo.obj.name")
@Tag(name = "$!{tableInfo.obj.name}Advanced", description = "$!{tableInfo.obj.comment}高级接口")
@Introspected
@Validated
@ExecuteOn(TaskExecutors.VIRTUAL)
@Secured(value = [SecurityRules.IS_AUTHENTICATED])
 class $!{tableName}Advanced(
  private val $!{serviceName}: $!{tableInfo.name}Service
 ) : BaseController() {

  
   
	
	@Operation(summary ="[新增]创建多条记录")
    @Post("/list")
    @SingleResult
	@Secured(value = [SecurityRules.IS_ADMIN])
     fun createList(@Valid @Body $!{entityName}DTO: List<$!{tableInfo.name}DTO>): Rsp<List<$!{tableInfo.name}VO?>> {
        val param=$!{tableInfo.name}Mapper.MAPPER.dto2bo($!{entityName}DTO)
        val result=$!{serviceName}.saveList(param)
        return Rsp.success(result)
    }
	
	
	/**
	* 权限:admin
	*/
    @Operation(summary ="[删除]彻底删除单条记录")
    @Delete()
    @SingleResult
	@Secured(value = [SecurityRules.IS_ADMIN])
     fun delete(@NotNull(message = "[id]不能为空")
			   @QueryValue("id")
			   @Parameter(description = "唯一ID",example = "1541693333435453441",required =  true)
			   id:Long):Rsp<Long> {
        val result=$!{serviceName}.delete(id)
        return Rsp.success(result)
    }
	/**
	* 权限:admin
	*/
	@Operation(summary ="[删除]彻底删除多条记录")
    @Delete("/list")
    @SingleResult
	@Secured(value = [SecurityRules.IS_ADMIN])
     fun delete(@NotEmpty(message = "[ids]不能为空")
			   @QueryValue
			   @Parameter(description = "唯一IDs",example = "1541693333435453441",required =  true)
			   ids:List<Long>):Rsp<Int> {
        val result=$!{serviceName}.delete(ids)
        return Rsp.success(result)
    }
	
   
	@Operation(summary ="[删除]逻辑删除多条记录")
    @Delete("/logic/list")
    @SingleResult
	@Secured(value = [SecurityRules.IS_ADMIN])
     fun deleteByLogic(@NotEmpty(message = "[ids]不能为空")
			   @QueryValue
			   @Parameter(description = "唯一IDs",example = "1541693333435453441",required =  true)
			   ids:List<Long>):Rsp<Int> {
        val result=$!{serviceName}.deleteByLogic(ids)
        return Rsp.success(result)
    }
	
	
	/**
	* 权限:admin
	*/
	@Operation(summary ="[更新]恢复逻辑删除记录")
    @Put("/logic")
    @SingleResult
	@Secured(value = [SecurityRules.IS_ADMIN])
     fun recoveryByLogic(@NotNull(message = "[id]不能为空")
			   @QueryValue("id")
			   @Parameter(description = "唯一ID",example = "1541693333435453441",required =  true)
			   id:Long):Rsp<Int> {
        val result=$!{serviceName}.recoveryByLogic(id)
        return Rsp.success(result)
    }
	/**
	* 权限:admin
	*/
	@Operation(summary ="[更新]恢复逻辑删除记录")
    @Put("/logic/list")
    @SingleResult
	@Secured(value = [SecurityRules.IS_ADMIN])
     fun recoveryByLogic(@NotEmpty(message = "[ids]不能为空")
			   @QueryValue
			   @Parameter(description = "唯一IDs",example = "1541693333435453441",required =  true)
			   ids:List<Long>):Rsp<Int> {
        val result=$!{serviceName}.recoveryByLogic(ids)
        return Rsp.success(result)
    }
	

	/**
	* 权限:admin
	*/
    @Operation(summary ="[查询]分页查询[含逻辑删除]记录")
    @Get("/page/logic{?pageDTO*}{?pageable*}")
	@Secured(value = [SecurityRules.IS_ADMIN])
     fun getPageLogicList(@QueryValue pageable:PageableDTO,@QueryValue  pageDTO:$!{tableInfo.name}PageDTO):Rsp<RspPagination<$!{tableInfo.name}VO?>>  {
        val param=$!{tableInfo.name}Mapper.MAPPER.pageDto2bo(pageDTO)
        val result=$!{serviceName}.findUnLimitPage(param,pageable.into())
        return Rsp.success(result)
    }

	/**
	* 权限:admin
	*/
    @Operation(summary ="[查询]条件查询所有记录")
    @Get("/all/list{?pageDTO*}")
	@Secured(value = [SecurityRules.IS_ADMIN])
     fun  getList(@QueryValue pageDTO:$!{tableInfo.name}PageDTO):Rsp<List<$!{tableInfo.name}VO?>> {
       val param=$!{tableInfo.name}Mapper.MAPPER.pageDto2bo(pageDTO)
        val result=$!{serviceName}.findLimitAll(param)
        return Rsp.success(result)
    }
	
	/**
	* 权限:admin
	*/
	@Operation(summary ="[查询]查询所有记录")
    @Get("/all")
	@Secured(value = [SecurityRules.IS_ADMIN])
     fun  getAll():Rsp<List<$!{tableInfo.name}VO?>> {
        val result=$!{serviceName}.findLimitAll()
        return Rsp.success(result)
    }

	/**
	* 权限:admin
	*/
    @Operation(summary ="[查询]查询所有[含逻辑删除]记录")
    @Get("/all/unLimit")
	@Secured(value = [SecurityRules.IS_ADMIN])
     fun getAllLogicList(@Nullable authentication:Authentication?):Rsp<List<$!{tableInfo.name}VO?>> {
        val result=$!{serviceName}.findUnLimitAll()
        return Rsp.success(result)
    }


}
